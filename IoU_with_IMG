Created on Tue Mar 10 18:06:07 2020

@author: sysadmin
"""

# import the necessary packages
from collections import namedtuple
import numpy as np
import cv2

# define the `Detection` object
Detection = namedtuple("Detection", ["image_path", "gt", "pred"])

# =============================================================================

#BOX A is yolo prediction
#BOX B is XML 

#boxA = [0,272,7,289]
#boxB = [1,271,4,281]

boxA = [779,284,795,296]
boxB = [780,284,792,296]

boxA = [773,293,789,305]
boxB = [775,293,786,304]

boxA = [786,277,802,290]
boxB = [788,278,800,290]

boxA = [795,269,809,282]
boxB = [796,270,809,282]

boxA = [769,310,784,321]
boxB = [770,310,781,321]


#Detection(r"C:\Users\ollir\Desktop\inkoo\pano_0009_000013_023.jpg", [779,284,795,296], [780,284,792,296]),
	Detection(r"C:\Users\ollir\Desktop\inkoo\pano_0009_000015_023.jpg", [786,277,802,290], [788,278,800,290]),
	Detection(r"C:\Users\ollir\Desktop\inkoo\pano_0009_000016_023.jpg", [795,269,809,282], [796,270,809,282]),
	Detection(r"C:\Users\ollir\Desktop\inkoo\pano_0009_000019_023.jpg", [769,310,784,321], [770,310,781,321])]


examples = [
	Detection(r"C:\Users\ollir\Desktop\inkoo\pano_0009_000014_023.jpg", [773,293,789,305], [775,293,786,304])]


def bb_intersection_over_union(boxA, boxB):
    # determine the (x, y)-coordinates of the intersection rectangle
    xA = max(boxA[0], boxB[0])
    yA = max(boxA[1], boxB[1])
    xB = min(boxA[2], boxB[2])
    yB = min(boxA[3], boxB[3])

    # compute the area of intersection rectangle
    interArea = (xB - xA) * (yB - yA)

    # compute the area of both the prediction and ground-truth
    # rectangles
    boxAArea = (boxA[2] - boxA[0]) * (boxA[3] - boxA[1])
    boxBArea = (boxB[2] - boxB[0]) * (boxB[3] - boxB[1])

    # compute the intersection over union by taking the intersection
    # area and dividing it by the sum of prediction + ground-truth
    # areas - the interesection area
    iou = interArea / float(boxAArea + boxBArea - interArea)

    # return the intersection over union value
    return iou

bb_intersection_over_union(boxA, boxB)


# loop over the example detections
for detection in examples:
	# load the image
	image = cv2.imread(detection.image_path)
	# draw the ground-truth bounding box along with the predicted
	# bounding box
	cv2.rectangle(image, tuple(detection.gt[:2]), 
		tuple(detection.gt[2:]), (0, 255, 0), 2)
	cv2.rectangle(image, tuple(detection.pred[:2]), 
		tuple(detection.pred[2:]), (0, 0, 255), 2)
	# compute the intersection over union and display it
	iou = bb_intersection_over_union(detection.gt, detection.pred)
	cv2.putText(image, "IoU: {:.4f}".format(iou), (10, 30),
		cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
	print("{}: {:.4f}".format(detection.image_path, iou))
	# show the output image
	cv2.imshow("Image", image)
	cv2.waitKey(0)

