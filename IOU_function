# -*- coding: utf-8 -*-
"""
Inspired by: https://www.pyimagesearch.com/2016/11/07/intersection-over-union-iou-for-object-detection/ 
"""

# import the necessary packages
from collections import namedtuple
import numpy as np
import cv2

# define the `Detection` object
#Detection = namedtuple("Detection", ["image_path", "gt", "pred"])

#BOX A is yolo prediction
#BOX B is PascalVOC.xml, ground truth 

boxA = [779,284,795,296]
boxB = [780,284,792,296]


# Function that calculates the IOU (intersection over union)
def bb_intersection_over_union(boxA, boxB):
    # determine the (x, y)-coordinates of the intersection rectangle
    xA = max(boxA[0], boxB[0])
    yA = max(boxA[1], boxB[1])
    xB = min(boxA[2], boxB[2])
    yB = min(boxA[3], boxB[3])

    # compute the area of intersection rectangle
    interArea = (xB - xA) * (yB - yA)

    # compute the area of both the prediction and ground-truth
    # rectangles
    boxAArea = (boxA[2] - boxA[0]) * (boxA[3] - boxA[1])
    boxBArea = (boxB[2] - boxB[0]) * (boxB[3] - boxB[1])

    # compute the intersection over union by taking the intersection
    # area and dividing it by the sum of prediction + ground-truth
    # areas - the interesection area
    iou = interArea / float(boxAArea + boxBArea - interArea)

    # return the intersection over union value
    return iou

# Calculate IOU
bb_intersection_over_union(boxA, boxB)
